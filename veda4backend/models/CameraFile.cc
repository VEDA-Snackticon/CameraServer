/**
 *
 *  CameraFile.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "CameraFile.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::veda4;

const std::string CameraFile::Cols::_id = "id";
const std::string CameraFile::Cols::_transaction_id = "transaction_id";
const std::string CameraFile::Cols::_file_name = "file_name";
const std::string CameraFile::Cols::_cam_id = "cam_id";
const std::string CameraFile::Cols::_path = "path";
const std::string CameraFile::primaryKeyName = "id";
const bool CameraFile::hasPrimaryKey = true;
const std::string CameraFile::tableName = "camera_file";

const std::vector<typename CameraFile::MetaData> CameraFile::metaData_={
{"id","int32_t","int",4,1,1,1},
{"transaction_id","std::string","char(36)",0,0,0,0},
{"file_name","std::string","varchar(255)",255,0,0,0},
{"cam_id","int64_t","bigint",8,0,0,0},
{"path","std::string","varchar(255)",255,0,0,1}
};
const std::string &CameraFile::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
CameraFile::CameraFile(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["transaction_id"].isNull())
        {
            transactionId_=std::make_shared<std::string>(r["transaction_id"].as<std::string>());
        }
        if(!r["file_name"].isNull())
        {
            fileName_=std::make_shared<std::string>(r["file_name"].as<std::string>());
        }
        if(!r["cam_id"].isNull())
        {
            camId_=std::make_shared<int64_t>(r["cam_id"].as<int64_t>());
        }
        if(!r["path"].isNull())
        {
            path_=std::make_shared<std::string>(r["path"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            transactionId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            fileName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            camId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            path_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

CameraFile::CameraFile(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            transactionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            camId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            path_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

CameraFile::CameraFile(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("transaction_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["transaction_id"].isNull())
        {
            transactionId_=std::make_shared<std::string>(pJson["transaction_id"].asString());
        }
    }
    if(pJson.isMember("file_name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["file_name"].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson["file_name"].asString());
        }
    }
    if(pJson.isMember("cam_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["cam_id"].isNull())
        {
            camId_=std::make_shared<int64_t>((int64_t)pJson["cam_id"].asInt64());
        }
    }
    if(pJson.isMember("path"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["path"].isNull())
        {
            path_=std::make_shared<std::string>(pJson["path"].asString());
        }
    }
}

void CameraFile::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            transactionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            camId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            path_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

void CameraFile::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("transaction_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["transaction_id"].isNull())
        {
            transactionId_=std::make_shared<std::string>(pJson["transaction_id"].asString());
        }
    }
    if(pJson.isMember("file_name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["file_name"].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson["file_name"].asString());
        }
    }
    if(pJson.isMember("cam_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["cam_id"].isNull())
        {
            camId_=std::make_shared<int64_t>((int64_t)pJson["cam_id"].asInt64());
        }
    }
    if(pJson.isMember("path"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["path"].isNull())
        {
            path_=std::make_shared<std::string>(pJson["path"].asString());
        }
    }
}

const int32_t &CameraFile::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CameraFile::getId() const noexcept
{
    return id_;
}
void CameraFile::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename CameraFile::PrimaryKeyType & CameraFile::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &CameraFile::getValueOfTransactionId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(transactionId_)
        return *transactionId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CameraFile::getTransactionId() const noexcept
{
    return transactionId_;
}
void CameraFile::setTransactionId(const std::string &pTransactionId) noexcept
{
    transactionId_ = std::make_shared<std::string>(pTransactionId);
    dirtyFlag_[1] = true;
}
void CameraFile::setTransactionId(std::string &&pTransactionId) noexcept
{
    transactionId_ = std::make_shared<std::string>(std::move(pTransactionId));
    dirtyFlag_[1] = true;
}
void CameraFile::setTransactionIdToNull() noexcept
{
    transactionId_.reset();
    dirtyFlag_[1] = true;
}

const std::string &CameraFile::getValueOfFileName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(fileName_)
        return *fileName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CameraFile::getFileName() const noexcept
{
    return fileName_;
}
void CameraFile::setFileName(const std::string &pFileName) noexcept
{
    fileName_ = std::make_shared<std::string>(pFileName);
    dirtyFlag_[2] = true;
}
void CameraFile::setFileName(std::string &&pFileName) noexcept
{
    fileName_ = std::make_shared<std::string>(std::move(pFileName));
    dirtyFlag_[2] = true;
}
void CameraFile::setFileNameToNull() noexcept
{
    fileName_.reset();
    dirtyFlag_[2] = true;
}

const int64_t &CameraFile::getValueOfCamId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(camId_)
        return *camId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &CameraFile::getCamId() const noexcept
{
    return camId_;
}
void CameraFile::setCamId(const int64_t &pCamId) noexcept
{
    camId_ = std::make_shared<int64_t>(pCamId);
    dirtyFlag_[3] = true;
}
void CameraFile::setCamIdToNull() noexcept
{
    camId_.reset();
    dirtyFlag_[3] = true;
}

const std::string &CameraFile::getValueOfPath() const noexcept
{
    static const std::string defaultValue = std::string();
    if(path_)
        return *path_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CameraFile::getPath() const noexcept
{
    return path_;
}
void CameraFile::setPath(const std::string &pPath) noexcept
{
    path_ = std::make_shared<std::string>(pPath);
    dirtyFlag_[4] = true;
}
void CameraFile::setPath(std::string &&pPath) noexcept
{
    path_ = std::make_shared<std::string>(std::move(pPath));
    dirtyFlag_[4] = true;
}

void CameraFile::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &CameraFile::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "transaction_id",
        "file_name",
        "cam_id",
        "path"
    };
    return inCols;
}

void CameraFile::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTransactionId())
        {
            binder << getValueOfTransactionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFileName())
        {
            binder << getValueOfFileName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCamId())
        {
            binder << getValueOfCamId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPath())
        {
            binder << getValueOfPath();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> CameraFile::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void CameraFile::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTransactionId())
        {
            binder << getValueOfTransactionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFileName())
        {
            binder << getValueOfFileName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCamId())
        {
            binder << getValueOfCamId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPath())
        {
            binder << getValueOfPath();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value CameraFile::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTransactionId())
    {
        ret["transaction_id"]=getValueOfTransactionId();
    }
    else
    {
        ret["transaction_id"]=Json::Value();
    }
    if(getFileName())
    {
        ret["file_name"]=getValueOfFileName();
    }
    else
    {
        ret["file_name"]=Json::Value();
    }
    if(getCamId())
    {
        ret["cam_id"]=(Json::Int64)getValueOfCamId();
    }
    else
    {
        ret["cam_id"]=Json::Value();
    }
    if(getPath())
    {
        ret["path"]=getValueOfPath();
    }
    else
    {
        ret["path"]=Json::Value();
    }
    return ret;
}

Json::Value CameraFile::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTransactionId())
            {
                ret[pMasqueradingVector[1]]=getValueOfTransactionId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getFileName())
            {
                ret[pMasqueradingVector[2]]=getValueOfFileName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCamId())
            {
                ret[pMasqueradingVector[3]]=(Json::Int64)getValueOfCamId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPath())
            {
                ret[pMasqueradingVector[4]]=getValueOfPath();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTransactionId())
    {
        ret["transaction_id"]=getValueOfTransactionId();
    }
    else
    {
        ret["transaction_id"]=Json::Value();
    }
    if(getFileName())
    {
        ret["file_name"]=getValueOfFileName();
    }
    else
    {
        ret["file_name"]=Json::Value();
    }
    if(getCamId())
    {
        ret["cam_id"]=(Json::Int64)getValueOfCamId();
    }
    else
    {
        ret["cam_id"]=Json::Value();
    }
    if(getPath())
    {
        ret["path"]=getValueOfPath();
    }
    else
    {
        ret["path"]=Json::Value();
    }
    return ret;
}

bool CameraFile::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("transaction_id"))
    {
        if(!validJsonOfField(1, "transaction_id", pJson["transaction_id"], err, true))
            return false;
    }
    if(pJson.isMember("file_name"))
    {
        if(!validJsonOfField(2, "file_name", pJson["file_name"], err, true))
            return false;
    }
    if(pJson.isMember("cam_id"))
    {
        if(!validJsonOfField(3, "cam_id", pJson["cam_id"], err, true))
            return false;
    }
    if(pJson.isMember("path"))
    {
        if(!validJsonOfField(4, "path", pJson["path"], err, true))
            return false;
    }
    else
    {
        err="The path column cannot be null";
        return false;
    }
    return true;
}
bool CameraFile::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool CameraFile::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("transaction_id"))
    {
        if(!validJsonOfField(1, "transaction_id", pJson["transaction_id"], err, false))
            return false;
    }
    if(pJson.isMember("file_name"))
    {
        if(!validJsonOfField(2, "file_name", pJson["file_name"], err, false))
            return false;
    }
    if(pJson.isMember("cam_id"))
    {
        if(!validJsonOfField(3, "cam_id", pJson["cam_id"], err, false))
            return false;
    }
    if(pJson.isMember("path"))
    {
        if(!validJsonOfField(4, "path", pJson["path"], err, false))
            return false;
    }
    return true;
}
bool CameraFile::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool CameraFile::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
