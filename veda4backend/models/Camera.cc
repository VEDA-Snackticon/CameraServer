/**
 *
 *  Camera.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Camera.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::veda4;

const std::string Camera::Cols::_id = "id";
const std::string Camera::Cols::_description = "description";
const std::string Camera::Cols::_is_alive = "is_alive";
const std::string Camera::Cols::_ip_addr = "ip_addr";
const std::string Camera::Cols::_group_number = "group_number";
const std::string Camera::Cols::_is_master = "is_master";
const std::string Camera::primaryKeyName = "id";
const bool Camera::hasPrimaryKey = true;
const std::string Camera::tableName = "camera";

const std::vector<typename Camera::MetaData> Camera::metaData_={
{"id","int64_t","bigint",8,1,1,1},
{"description","std::string","varchar(255)",255,0,0,0},
{"is_alive","int8_t","tinyint(1)",1,0,0,0},
{"ip_addr","std::string","varchar(45)",45,0,0,0},
{"group_number","int32_t","int",4,0,0,0},
{"is_master","int8_t","tinyint(1)",1,0,0,0}
};
const std::string &Camera::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Camera::Camera(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["description"].isNull())
        {
            description_=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["is_alive"].isNull())
        {
            isAlive_=std::make_shared<int8_t>(r["is_alive"].as<int8_t>());
        }
        if(!r["ip_addr"].isNull())
        {
            ipAddr_=std::make_shared<std::string>(r["ip_addr"].as<std::string>());
        }
        if(!r["group_number"].isNull())
        {
            groupNumber_=std::make_shared<int32_t>(r["group_number"].as<int32_t>());
        }
        if(!r["is_master"].isNull())
        {
            isMaster_=std::make_shared<int8_t>(r["is_master"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            isAlive_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            ipAddr_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            groupNumber_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            isMaster_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Camera::Camera(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            isAlive_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            ipAddr_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            groupNumber_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            isMaster_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

Camera::Camera(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("is_alive"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["is_alive"].isNull())
        {
            isAlive_=std::make_shared<int8_t>((int8_t)pJson["is_alive"].asInt64());
        }
    }
    if(pJson.isMember("ip_addr"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["ip_addr"].isNull())
        {
            ipAddr_=std::make_shared<std::string>(pJson["ip_addr"].asString());
        }
    }
    if(pJson.isMember("group_number"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["group_number"].isNull())
        {
            groupNumber_=std::make_shared<int32_t>((int32_t)pJson["group_number"].asInt64());
        }
    }
    if(pJson.isMember("is_master"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["is_master"].isNull())
        {
            isMaster_=std::make_shared<int8_t>((int8_t)pJson["is_master"].asInt64());
        }
    }
}

void Camera::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            isAlive_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            ipAddr_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            groupNumber_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            isMaster_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

void Camera::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("is_alive"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["is_alive"].isNull())
        {
            isAlive_=std::make_shared<int8_t>((int8_t)pJson["is_alive"].asInt64());
        }
    }
    if(pJson.isMember("ip_addr"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["ip_addr"].isNull())
        {
            ipAddr_=std::make_shared<std::string>(pJson["ip_addr"].asString());
        }
    }
    if(pJson.isMember("group_number"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["group_number"].isNull())
        {
            groupNumber_=std::make_shared<int32_t>((int32_t)pJson["group_number"].asInt64());
        }
    }
    if(pJson.isMember("is_master"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["is_master"].isNull())
        {
            isMaster_=std::make_shared<int8_t>((int8_t)pJson["is_master"].asInt64());
        }
    }
}

const int64_t &Camera::getValueOfId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Camera::getId() const noexcept
{
    return id_;
}
void Camera::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Camera::PrimaryKeyType & Camera::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Camera::getValueOfDescription() const noexcept
{
    static const std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Camera::getDescription() const noexcept
{
    return description_;
}
void Camera::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[1] = true;
}
void Camera::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[1] = true;
}
void Camera::setDescriptionToNull() noexcept
{
    description_.reset();
    dirtyFlag_[1] = true;
}

const int8_t &Camera::getValueOfIsAlive() const noexcept
{
    static const int8_t defaultValue = int8_t();
    if(isAlive_)
        return *isAlive_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Camera::getIsAlive() const noexcept
{
    return isAlive_;
}
void Camera::setIsAlive(const int8_t &pIsAlive) noexcept
{
    isAlive_ = std::make_shared<int8_t>(pIsAlive);
    dirtyFlag_[2] = true;
}
void Camera::setIsAliveToNull() noexcept
{
    isAlive_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Camera::getValueOfIpAddr() const noexcept
{
    static const std::string defaultValue = std::string();
    if(ipAddr_)
        return *ipAddr_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Camera::getIpAddr() const noexcept
{
    return ipAddr_;
}
void Camera::setIpAddr(const std::string &pIpAddr) noexcept
{
    ipAddr_ = std::make_shared<std::string>(pIpAddr);
    dirtyFlag_[3] = true;
}
void Camera::setIpAddr(std::string &&pIpAddr) noexcept
{
    ipAddr_ = std::make_shared<std::string>(std::move(pIpAddr));
    dirtyFlag_[3] = true;
}
void Camera::setIpAddrToNull() noexcept
{
    ipAddr_.reset();
    dirtyFlag_[3] = true;
}

const int32_t &Camera::getValueOfGroupNumber() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(groupNumber_)
        return *groupNumber_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Camera::getGroupNumber() const noexcept
{
    return groupNumber_;
}
void Camera::setGroupNumber(const int32_t &pGroupNumber) noexcept
{
    groupNumber_ = std::make_shared<int32_t>(pGroupNumber);
    dirtyFlag_[4] = true;
}
void Camera::setGroupNumberToNull() noexcept
{
    groupNumber_.reset();
    dirtyFlag_[4] = true;
}

const int8_t &Camera::getValueOfIsMaster() const noexcept
{
    static const int8_t defaultValue = int8_t();
    if(isMaster_)
        return *isMaster_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Camera::getIsMaster() const noexcept
{
    return isMaster_;
}
void Camera::setIsMaster(const int8_t &pIsMaster) noexcept
{
    isMaster_ = std::make_shared<int8_t>(pIsMaster);
    dirtyFlag_[5] = true;
}
void Camera::setIsMasterToNull() noexcept
{
    isMaster_.reset();
    dirtyFlag_[5] = true;
}

void Camera::updateId(const uint64_t id)
{
    id_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &Camera::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "description",
        "is_alive",
        "ip_addr",
        "group_number",
        "is_master"
    };
    return inCols;
}

void Camera::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIsAlive())
        {
            binder << getValueOfIsAlive();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getIpAddr())
        {
            binder << getValueOfIpAddr();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getGroupNumber())
        {
            binder << getValueOfGroupNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIsMaster())
        {
            binder << getValueOfIsMaster();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Camera::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Camera::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIsAlive())
        {
            binder << getValueOfIsAlive();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getIpAddr())
        {
            binder << getValueOfIpAddr();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getGroupNumber())
        {
            binder << getValueOfGroupNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIsMaster())
        {
            binder << getValueOfIsMaster();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Camera::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getIsAlive())
    {
        ret["is_alive"]=getValueOfIsAlive();
    }
    else
    {
        ret["is_alive"]=Json::Value();
    }
    if(getIpAddr())
    {
        ret["ip_addr"]=getValueOfIpAddr();
    }
    else
    {
        ret["ip_addr"]=Json::Value();
    }
    if(getGroupNumber())
    {
        ret["group_number"]=getValueOfGroupNumber();
    }
    else
    {
        ret["group_number"]=Json::Value();
    }
    if(getIsMaster())
    {
        ret["is_master"]=getValueOfIsMaster();
    }
    else
    {
        ret["is_master"]=Json::Value();
    }
    return ret;
}

Json::Value Camera::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[1]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getIsAlive())
            {
                ret[pMasqueradingVector[2]]=getValueOfIsAlive();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getIpAddr())
            {
                ret[pMasqueradingVector[3]]=getValueOfIpAddr();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getGroupNumber())
            {
                ret[pMasqueradingVector[4]]=getValueOfGroupNumber();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getIsMaster())
            {
                ret[pMasqueradingVector[5]]=getValueOfIsMaster();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getIsAlive())
    {
        ret["is_alive"]=getValueOfIsAlive();
    }
    else
    {
        ret["is_alive"]=Json::Value();
    }
    if(getIpAddr())
    {
        ret["ip_addr"]=getValueOfIpAddr();
    }
    else
    {
        ret["ip_addr"]=Json::Value();
    }
    if(getGroupNumber())
    {
        ret["group_number"]=getValueOfGroupNumber();
    }
    else
    {
        ret["group_number"]=Json::Value();
    }
    if(getIsMaster())
    {
        ret["is_master"]=getValueOfIsMaster();
    }
    else
    {
        ret["is_master"]=Json::Value();
    }
    return ret;
}

bool Camera::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(1, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("is_alive"))
    {
        if(!validJsonOfField(2, "is_alive", pJson["is_alive"], err, true))
            return false;
    }
    if(pJson.isMember("ip_addr"))
    {
        if(!validJsonOfField(3, "ip_addr", pJson["ip_addr"], err, true))
            return false;
    }
    if(pJson.isMember("group_number"))
    {
        if(!validJsonOfField(4, "group_number", pJson["group_number"], err, true))
            return false;
    }
    if(pJson.isMember("is_master"))
    {
        if(!validJsonOfField(5, "is_master", pJson["is_master"], err, true))
            return false;
    }
    return true;
}
bool Camera::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Camera::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(1, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("is_alive"))
    {
        if(!validJsonOfField(2, "is_alive", pJson["is_alive"], err, false))
            return false;
    }
    if(pJson.isMember("ip_addr"))
    {
        if(!validJsonOfField(3, "ip_addr", pJson["ip_addr"], err, false))
            return false;
    }
    if(pJson.isMember("group_number"))
    {
        if(!validJsonOfField(4, "group_number", pJson["group_number"], err, false))
            return false;
    }
    if(pJson.isMember("is_master"))
    {
        if(!validJsonOfField(5, "is_master", pJson["is_master"], err, false))
            return false;
    }
    return true;
}
bool Camera::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Camera::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 45)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 45)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
